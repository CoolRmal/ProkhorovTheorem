import Mathlib.MeasureTheory.Measure.LevyProkhorovMetric
import Mathlib.Tactic.Rify

--import Mathlib
--set_option maxHeartbeats 400000
--set_option diagnostics true
set_option linter.style.longLine false
set_option linter.unusedTactic false
set_option linter.flexible true
open Topology Metric Filter Set ENNReal NNReal MeasureTheory.ProbabilityMeasure TopologicalSpace
namespace MeasureTheory

open scoped Topology ENNReal NNReal BoundedContinuousFunction


variable {X : Type*} [MeasurableSpace X]

lemma ENNreal_ProbMeasure_toMeasure (Œº : ProbabilityMeasure X) (s : Set X) :
    Œº.toMeasure s = ((Œº s) : ENNReal) := by
    exact Eq.symm (ennreal_coeFn_eq_coeFn_toMeasure Œº s)

lemma nnreal_tsum_ge_union {Œº : ProbabilityMeasure X} (f : ‚Ñï ‚Üí Set X)
  (hf : Summable fun n ‚Ü¶ Œº (f n)) :
    Œº (‚ãÉ n, f n) ‚â§ ‚àë' n, Œº (f n) := by
  rw [‚Üê ENNReal.coe_le_coe, ENNReal.coe_tsum hf]
  simpa using measure_iUnion_le (Œº := Œº.toMeasure) f

variable [PseudoMetricSpace X] -- may change this to EMetric later

theorem prob_tendsto_measure_iUnion_accumulate {Œ± Œπ : Type*}
    [Preorder Œπ] [IsCountablyGenerated (atTop : Filter Œπ)]
    {_ : MeasurableSpace Œ±} {Œº : Measure Œ±} {f : Œπ ‚Üí Set Œ±} :
    Tendsto (fun i ‚Ü¶ Œº (Accumulate f i)) atTop (ùìù (Œº (‚ãÉ i, f i))) := by
  refine .of_neBot_imp fun h ‚Ü¶ ?_
  have := (atTop_neBot_iff.1 h).2
  rw [measure_iUnion_eq_iSup_accumulate]
  exact tendsto_atTop_iSup fun i j hij ‚Ü¶ by gcongr

-- Definition taken from R√©my's Repository but modified to use ProbabilityMeasure instead of measure. - Need to change this later
def Tight (G : Set (Measure X)) : Prop :=
  ‚àÄ Œµ : ‚Ñù‚â•0‚àû, 0 < Œµ ‚Üí ‚àÉ K : Set X, IsCompact K ‚àß ‚àÄ Œº ‚àà G, Œº K·∂ú ‚â§ Œµ

def TightProb (S : Set (ProbabilityMeasure X)) : Prop :=
  ‚àÄ Œµ : ‚Ñù‚â•0‚àû, 0 < Œµ ‚Üí ‚àÉ K : Set X, IsCompact K ‚àß ‚àÄ Œº ‚àà S, Œº K·∂ú ‚â§ Œµ

/-- Need to sort this out so I can put this in Remy's repo-/
lemma tight_iff_tightprob (G : Set (Measure X)) {S : Set (ProbabilityMeasure X)} : Tight G ‚Üî TightProb S := by sorry

lemma tightProb_iff_nnreal {S : Set (ProbabilityMeasure X)} :
    TightProb S ‚Üî ‚àÄ Œµ : ‚Ñù‚â•0, 0 < Œµ ‚Üí ‚àÉ K : Set X, IsCompact K ‚àß ‚àÄ Œº ‚àà S, Œº K·∂ú ‚â§ Œµ := by
  simp only [TightProb, forall_ennreal, ENNReal.coe_pos, ENNReal.coe_le_coe, zero_lt_top, le_top,
    implies_true, and_true, forall_const, and_iff_left_iff_imp]
  exact fun _ ‚Ü¶ ‚ü®‚àÖ, isCompact_empty‚ü©

variable [OpensMeasurableSpace X]

lemma meas_compl_thang (Œº : ProbabilityMeasure X) (km : ‚Ñï ‚Üí ‚Ñï) (m:‚Ñï) (D : ‚Ñï ‚Üí X) :
    Œº (‚ãÉ i ‚â§ km (m + 1), closure (ball (D i) (1 / (‚Üëm + 1)))) +
    Œº (‚ãÉ i ‚â§ km (m + 1), closure (ball (D i) (1 / (‚Üëm + 1))))·∂ú = 1 := by
  suffices MeasurableSet (‚ãÉ i, ‚ãÉ (_ : i ‚â§ km (m + 1)), closure (ball (D i) (1 / (‚Üëm + 1)))) by
    have := prob_add_prob_compl (Œ± := X) (Œº := Œº) this
    simp only [‚Üê ennreal_coeFn_eq_coeFn_toMeasure] at this
    exact_mod_cast this
  change MeasurableSet (‚ãÉ i ‚àà {i | i ‚â§ km (m + 1)}, _)
  refine Finite.measurableSet_biUnion ?_ ?_
  ¬∑ exact finite_le_nat (km (m + 1))
  ¬∑ intro b hb
    exact measurableSet_closure

variable [SeparableSpace X]
noncomputable section

variable (S : Set (ProbabilityMeasure X))

abbrev P := LevyProkhorov.equiv (ProbabilityMeasure X)

abbrev T := P‚Åª¬π' S

lemma MeasOpenCoverTendstoMeasUniv (U : ‚Ñï ‚Üí Set X) (O : ‚àÄ i, IsOpen (U i))
    (hcomp: IsCompact (closure S)) (Œµ : ‚Ñù) (heps : Œµ > 0) (Cov : ‚ãÉ i, U i = univ):
    ‚àÉ (k : ‚Ñï), ‚àÄ Œº ‚àà S, Œº (‚ãÉ (i ‚â§ k), U i) > 1 - Œµ := by
  by_contra! nh
  choose Œº hŒºInS hcontradiction using nh
  obtain ‚ü®Œºlim, _, sub, hsubmono, hŒºconverges‚ü© := hcomp.isSeqCompact (fun n => subset_closure <| hŒºInS n)
  have Measurebound n := calc
    (Œºlim (‚ãÉ (i ‚â§ n), U i) : ‚Ñù)
    _ ‚â§ liminf (fun k => (Œº (sub k) (‚ãÉ (i ‚â§ n), U i) : ‚Ñù)) atTop := by
      have hopen : IsOpen (‚ãÉ i ‚â§ n, U i) := by
        exact isOpen_biUnion fun i a => O i
      --This is the key lemma
      have := ProbabilityMeasure.le_liminf_measure_open_of_tendsto hŒºconverges hopen
      simp only [Function.comp_apply, ‚Üê ProbabilityMeasure.ennreal_coeFn_eq_coeFn_toMeasure, ennreal_coeFn_eq_coeFn_toMeasure] at this
      rw [toReal_liminf]; norm_cast
      simp_rw [‚ÜêProbabilityMeasure.ennreal_coeFn_eq_coeFn_toMeasure] at this
      rw [‚ÜêofNNReal_liminf] at this; norm_cast at this
      use 1
      simp only [ge_iff_le, eventually_map, eventually_atTop, forall_exists_index]
      intro a x h
      specialize h x (by simp); apply h.trans
      exact ProbabilityMeasure.apply_le_one (Œº (sub x)) (‚ãÉ i ‚â§ n, U i)
    _ ‚â§ liminf (fun k => (Œº (sub k) (‚ãÉ (i ‚â§ sub k), U i) : ‚Ñù)) atTop := by
      apply Filter.liminf_le_liminf
      ¬∑ simp only [NNReal.coe_le_coe, eventually_atTop, ge_iff_le]
        use n + 1
        intro b hypo
        refine (Œº (sub b)).apply_mono <| Set.biUnion_mono (fun i (hi : i ‚â§ n) ‚Ü¶ hi.trans ?_) fun _ _ ‚Ü¶ le_rfl
        apply le_trans (Nat.le_add_right n 1) (le_trans hypo (StrictMono.le_apply hsubmono))
      ¬∑ simp only [autoParam, ge_iff_le, isBoundedUnder_ge_toReal]
        use 0; simp
      ¬∑ simp only [autoParam, ge_iff_le, isCoboundedUnder_ge_toReal]
        use 1; simp only [eventually_map, eventually_atTop, ge_iff_le, forall_exists_index]
        intro a d hyp
        specialize hyp d (by simp)
        apply hyp.trans; norm_cast
        exact ProbabilityMeasure.apply_le_one (Œº (sub d)) (‚ãÉ i ‚â§ sub d, U i)
    _ ‚â§ 1 - Œµ := by
      apply Filter.liminf_le_of_le
      ¬∑ use 0; simp
      ¬∑ simp only [eventually_atTop, ge_iff_le, forall_exists_index]
        intro b c h
        apply le_trans (h c le_rfl) (hcontradiction _)
  have cdiction : Tendsto (fun n => Œºlim (‚ãÉ i ‚â§ n, U i)) atTop (ùìù 1) := by
    have accumulation : Tendsto (fun n => Œºlim (‚ãÉ i ‚â§ n, U i)) atTop (ùìù (Œºlim (‚ãÉ i, U i))) := by
      simp_rw [‚ÜêSet.accumulate_def]
      exact ProbabilityMeasure.tendsto_measure_iUnion_accumulate
    rw [Cov] at accumulation
    simpa using accumulation
  have tends_to_univ : ‚àÄ·∂† n in atTop, Œºlim (‚ãÉ i ‚â§ n, U i) ‚â• 1 - Œµ / 2 := by
    apply Tendsto.eventually_const_le (v := 1)
    norm_num; positivity
    rw [‚ÜêNNReal.tendsto_coe] at cdiction
    exact cdiction
  suffices ‚àÄ·∂† n : ‚Ñï in atTop, False by exact this.exists.choose_spec
  filter_upwards [tends_to_univ] with n hn
  have falseity := hn.trans (Measurebound n)
  linarith

--#lint unusedHavesSuffices
lemma geom_series : ‚àë' (x : ‚Ñï), ((2:‚Ñù) ^ (x+1))‚Åª¬π = 1 := by
  simp_rw [‚Üê inv_pow, pow_succ, _root_.tsum_mul_right, tsum_geometric_inv_two]
  norm_num

variable [CompleteSpace X]

lemma geomsery (Œµ : ENNReal) : (‚àë' (m : ‚Ñï), Œµ * 2 ^ (-(m+1) : ‚Ñ§)) = Œµ := by
  rw [ENNReal.tsum_mul_left]
  nth_rw 2 [‚Üêmul_one (a :=Œµ)]
  congr
  simp_rw [‚Üê Nat.cast_one (R := ‚Ñ§), ‚Üê Nat.cast_add, ENNReal.zpow_neg (x:= 2) (by norm_num) (by norm_num)]
  simp_rw [zpow_natCast, ENNReal.inv_pow]
  rw [ENNReal.tsum_geometric_add_one]
  norm_num
  rw [ENNReal.inv_mul_cancel]
  all_goals norm_num

lemma better : ‚àÄ m:‚Ñï, (2 : NNReal) ^ (-(1:‚Ñ§) + -(m:‚Ñ§)) = 1 / 2 * (1 / 2) ^ m := by
  intro m
  field_simp
  rw [‚Üê @Int.neg_add, zpow_neg]
  refine (inv_mul_eq_one‚ÇÄ ?_).mpr ?_
  ¬∑ refine zpow_ne_zero (1 + m) (by simp)
  ¬∑ refine zpow_one_add‚ÇÄ (by simp) m

-- set_option diagnostics true in
theorem IsTightFamily_of_isRelativelyCompact (hcomp : IsCompact (closure S)) :
    TightProb S := by
  rw [tightProb_iff_nnreal]
  by_cases hempty : ¬¨Nonempty X
  ¬∑ simp only [not_nonempty_iff] at hempty
    intro Œµ Œµpos
    use ‚àÖ
    constructor
    ¬∑ exact isCompact_empty
    intro Œº hŒº
    rw [‚Üê @univ_eq_empty_iff] at hempty
    rw [‚Üê hempty]
    simp_all only [univ_eq_empty_iff, compl_univ]
    rw [‚Üê ENNReal.coe_le_coe]
    simp
  simp only [not_nonempty_iff, not_isEmpty_iff] at hempty

  -- Introduce Œµ > 0 for which we need to find a compact set K with Œº(K) ‚â• 1 - Œµ for all Œº ‚àà S
  intro Œµ Œµpos
  obtain ‚ü®D, fD‚ü© := exists_dense_seq X
  --obtain ‚ü®œÜ, hœÜ‚ÇÅ, hœÜ‚ÇÇ, hœÜ‚ÇÉ‚ü© := exists_seq_strictAnti_tendsto (0 : ‚Ñù)
  -- For each m ‚â• 1, cover X with balls of radius 1/m around points in the dense subset D
  have hcov : ‚àÄ m : ‚Ñï, ‚ãÉ i, ball (D i) (1 / (m+1)) = univ := by
    rw [denseRange_iff] at fD
    intro m
    ext p
    constructor
    ¬∑ exact fun a ‚Ü¶ trivial
    specialize fD p
    specialize fD (1 / (m+1))
    intro hp
    have hmdiv : 1 / ((m : ‚Ñù) + 1) > 0 := by
      exact Nat.one_div_pos_of_nat
    specialize fD hmdiv
    exact mem_iUnion.mpr fD
  have byclam : ‚àÄ (m : ‚Ñï), ‚àÉ (k : ‚Ñï),‚àÄ Œº ‚àà S, Œº (‚ãÉ i ‚â§ k, ball (D i) (1 / (m+1))) > 1 - (Œµ * 2 ^ (-m : ‚Ñ§) : ‚Ñù) := by
    intro m
    let Œµ' :=  (Œµ : ‚Ñù) * 2 ^ (-m : ‚Ñ§)
    apply MeasOpenCoverTendstoMeasUniv (S := S) (U := fun i => ball (D i) (1 / (m+1))) (Œµ := Œµ') (heps := _)
    ¬∑ intro i
      exact isOpen_ball
    ¬∑ exact hcomp
    ¬∑ exact hcov m
    ¬∑ intro h _
      positivity

  choose! km hbound using id byclam
  simp_all only [zpow_neg, zpow_natCast]
  let bigK := ‚ãÇ m, ‚ãÉ (i ‚â§ km (m+1)), closure (ball (D i) (1 / (m+1)))
  --This is proven ahead of our calc block as it will need to be called
  --multiple times inside to satisfy tsum's need to show summability
  -- I had to do it inside the actual proof term because this particular
  -- inequality required all our assumptions to be in scope
  have lt_geom_series : ‚àÄ (Œº : ProbabilityMeasure X), Œº ‚àà S ‚Üí ‚àë' (m : ‚Ñï), (1 - Œº.toMeasure (‚ãÉ i, ‚ãÉ (_ : i ‚â§ km (m + 1)), closure (ball (D i) (1 / (‚Üëm + 1))))) ‚â§ ‚àë' (m : ‚Ñï), (Œµ: ENNReal) * 2 ^ (-((m:‚Ñ§) + 1)) := by
    intro Œº hs
    refine ENNReal.tsum_le_tsum ?_
    intro m
    specialize hbound (m+1) Œº hs
    refine tsub_le_iff_tsub_le.mp ?_
    apply le_of_lt at hbound
    simp only [neg_add_rev, Int.reduceNeg, one_div, tsub_le_iff_right]
    simp only [Nat.cast_add, Nat.cast_one, one_div, tsub_le_iff_right] at hbound
    -- refine one_le_coe.mp ?_
    rw [‚Üê ENNReal.coe_ofNat,‚Üê ENNReal.coe_zpow,‚Üê ENNReal.coe_mul,ENNreal_ProbMeasure_toMeasure, ‚Üê ENNReal.coe_add,ENNReal.one_le_coe_iff, ‚Üê NNReal.coe_le_coe]
    apply le_trans hbound
    push_cast
    gcongr
    ¬∑ refine apply_mono Œº ?_
      refine iUnion‚ÇÇ_mono ?_
      intro i hi
      rw [@subset_def]
      intro x hx
      rw [@mem_ball'] at hx
      rw [@EMetric.mem_closure_iff_infEdist_zero]
      refine EMetric.infEdist_zero_of_mem ?_
      rw [@mem_ball']
      apply hx.trans
      field_simp
      refine (one_div_lt_one_div (by positivity) (by positivity)).mpr (by simp)
    ¬∑ congr!
      rw [‚Üê @Int.neg_add, @zpow_neg]
      congr!
      norm_cast
      simp only [Nat.ofNat_pos, ne_eq, OfNat.ofNat_ne_one, not_false_eq_true, pow_right_inj‚ÇÄ]
      exact Nat.add_comm m 1
    ¬∑ simp
  have tsumMeasureCompl (Œº : ProbabilityMeasure X) : ‚àë' (m : ‚Ñï), Œº.toMeasure (‚ãÉ i ‚â§ km (m + 1), closure (ball (D i) (1 / (‚Üëm + 1))))·∂ú =
  ‚àë' (m : ‚Ñï), (1 - Œº.toMeasure (‚ãÉ i ‚â§ km (m + 1), closure (ball (D i) (1 / (‚Üëm + 1))))) := by
    congr! with m
    rw [measure_compl ?_ ?_]
    ¬∑ simp
    ¬∑ refine Finite.measurableSet_biUnion ?_ ?_
      ¬∑ simp only [Nat.le_eq]
        refine BddAbove.finite ?_
        refine bddAbove_def.mpr ?_
        use km (m + 1) + 1
        intro y
        rw [@mem_def]
        omega
      ¬∑ intro b _
        exact measurableSet_closure
    ¬∑ simp
  have bigcalc (Œº : ProbabilityMeasure X) (hs : Œº ‚àà S) := calc
    Œº.toMeasure (bigK)·∂ú
    _ = Œº.toMeasure (‚ãÉ m,(‚ãÉ (i ‚â§ km (m+1)), closure (ball (D i) (1 / (m+1))))·∂ú) := by
      simp only [bigK]
      simp only [compl_iInter, compl_iUnion, bigK]
    _ ‚â§ ‚àë' m, Œº.toMeasure ((‚ãÉ (i ‚â§ km (m+1)), closure (ball (D i) (1 / (m+1))))·∂ú) := by
      apply measure_iUnion_le
    _ = ‚àë' m, (1 - Œº.toMeasure (‚ãÉ (i ‚â§ km (m+1)), closure (ball (D i) (1 / (m+1))))) := by
      exact tsumMeasureCompl Œº
    _ ‚â§ (‚àë' (m : ‚Ñï), (Œµ : ENNReal) * 2 ^ (-(m+1) : ‚Ñ§)) := by
      exact lt_geom_series Œº hs
    _ = Œµ := by exact geomsery Œµ
  by_cases hsempty : S = ‚àÖ
  ¬∑ use ‚àÖ
    constructor
    ¬∑ exact isCompact_empty
    ¬∑ intro Œº hŒº
      subst hsempty
      simp_all only [isClosed_empty, IsClosed.closure_eq, finite_empty, Finite.isCompact, mem_empty_iff_false,
        not_isEmpty_of_nonempty, iUnion_of_empty, gt_iff_lt, IsEmpty.exists_iff, implies_true, IsEmpty.forall_iff,
        iInter_of_empty, compl_univ, bigK]
  -- Final proof
  use bigK
  constructor
  -- Compactness first
  ¬∑ refine isCompact_of_totallyBounded_isClosed ?_ ?_
    --Totally bounded
    ¬∑ refine EMetric.totallyBounded_iff.mpr ?_
      intro Œ¥ Œ¥pos
      by_cases Œ¥fin : Œ¥ = ‚ä§
      ¬∑ obtain ‚ü®x‚ü© := hempty
        use {x}
        constructor
        ¬∑ exact finite_singleton x
        simp [Œ¥fin]
      apply nonempty_iff_ne_empty'.mpr at hsempty
      --specialize hempty Classical.choice
      -- t should be image under D of the set of numbers less than km of 1/Œ¥.ceil
      use Set.image D (Finset.Icc 0 (km (‚åà1 / Œ¥.toReal‚åâ‚Çä + 1)))
      constructor
      ¬∑ exact toFinite (D '' ‚Üë(Finset.Icc 0 (km (‚åà1 / Œ¥.toReal‚åâ‚Çä + 1))))
      ¬∑ simp only [one_div, Finset.coe_Icc, mem_image, mem_Icc, zero_le, true_and, iUnion_exists,
        biUnion_and', iUnion_iUnion_eq_right, bigK]
        have interthing : ‚àÄ t, ‚ãÇ m, ‚ãÉ i, ‚ãÉ (_ : i ‚â§ km (m + 1)), closure (ball (D i) (‚Üëm + 1)‚Åª¬π) ‚äÜ ‚ãÉ i, ‚ãÉ (_ : i ‚â§ km (t + 1)), closure (ball (D i) (‚Üët + 1)‚Åª¬π) := by
          exact fun t ‚Ü¶ iInter_subset_of_subset t fun ‚¶Éa‚¶Ñ a ‚Ü¶ a
        specialize interthing (‚åàŒ¥.toReal‚Åª¬π‚åâ‚Çä)
        apply interthing.trans
        gcongr with i hi
        intro x hx
        rw [@EMetric.mem_ball']
        rw [@EMetric.mem_closure_iff] at hx
        let B : ‚Ñù‚â•0‚àû := Œ¥ - (‚ÜëŒ¥‚Åª¬π + (1 / 2: ‚Ñù‚â•0‚àû))‚Åª¬π
        specialize hx B
        have Bpos : 0 < B := by
          unfold B
          rw [tsub_pos_iff_lt]
          lift Œ¥ to ‚Ñù‚â•0 using Œ¥fin
          suffices ‚Üë((Œ¥:NNReal)‚Åª¬π + ‚Üë((1:NNReal) / (2:NNReal)))‚Åª¬π < (Œ¥:ENNReal) by -- shoudln't be necessary
            convert this using 1
            push_cast -- cast of inverse equals invers of cast, missing norm_cast/push_cast lemma?
            simp only [one_div, ne_eq, add_eq_zero, inv_eq_zero, OfNat.ofNat_ne_zero, and_false,
              not_false_eq_true, coe_inv, coe_add, coe_ofNat, inv_inj, bigK]
            refine (ENNReal.add_left_inj <| by simp).mpr ?_
            ¬∑ refine Eq.symm (coe_inv ?_)
              simp only [gt_iff_lt, ENNReal.coe_pos, bigK] at Œ¥pos
              exact Ne.symm (ne_of_lt Œ¥pos)
          norm_cast at Œ¥pos ‚ä¢
          rw [inv_lt_iff_one_lt_mul‚ÇÄ]
          field_simp
          rw [lt_div_iff‚ÇÄ,‚Üê NNReal.coe_lt_coe]
          rify
          have H : 0 < (Œ¥:‚Ñù) ^2:= by positivity
          linear_combination H
          all_goals positivity
        specialize hx Bpos
        obtain ‚ü®y, hy, hyd‚ü© := hx
        rw [@mem_ball', ‚Üê @edist_lt_ofReal] at hy
        apply lt_of_le_of_lt (edist_triangle _ y _)
        rw [edist_comm] at hyd
        have greivance_dos : (ENNReal.ofReal (‚Üë‚åàŒ¥.toReal‚Åª¬π‚åâ‚Çä + 1)‚Åª¬π) = ((‚åàŒ¥.toReal‚Åª¬π‚åâ‚Çä + 1):‚Ñù‚â•0‚àû)‚Åª¬π := by
            refine (toReal_eq_toReal_iff' (by simp) (by simp)).mp ?_
            rw [toReal_ofReal]
            simp; norm_cast; positivity
          --rw [ofReal_toReal]
        rw [greivance_dos] at hy
        have le_sum : edist (D i) y + edist y x < ((‚Üë‚åàŒ¥.toReal‚Åª¬π‚åâ‚Çä + 1):‚Ñù‚â•0‚àû)‚Åª¬π + B := by
          exact ENNReal.add_lt_add hy hyd
        apply le_sum.trans; simp only [one_div, B, bigK]
        refine lt_tsub_iff_left.mp ?_
        refine sub_lt_of_sub_lt ?_ ?_ ?_
        ¬∑ rw [@inv_le_iff_inv_le]
          simp
        ¬∑ left; exact Œ¥fin
        ¬∑ field_simp
          have subsub : Œ¥ - (Œ¥ - 1 / (‚Üë‚åà1 / Œ¥.toReal‚åâ‚Çä + 1)) = 1 / (‚Üë‚åà1 / Œ¥.toReal‚åâ‚Çä + 1) := by
            refine ENNReal.sub_sub_cancel Œ¥fin ?_
            simp only [one_div, B, bigK]
            rw [@inv_le_iff_inv_le]
            refine le_add_of_le_of_nonneg ?_ ?_
            ¬∑ refine (toReal_le_toReal ?_ (natCast_ne_top ‚åàŒ¥.toReal‚Åª¬π‚åâ‚Çä)).mp ?_
              ¬∑ simp only [ne_eq, inv_eq_top, B, bigK]; exact pos_iff_ne_zero.mp Œ¥pos
              ¬∑ simp only [toReal_inv, toReal_natCast, B, bigK]
                have coersion : Œ¥.toReal‚Åª¬π ‚â§ ‚åàŒ¥.toReal‚Åª¬π‚åâ‚Çä := by
                  exact Nat.le_ceil Œ¥.toReal‚Åª¬π
                apply coersion.trans; rfl
            simp
          rw [subsub]
          simp only [one_div, ENNReal.inv_lt_inv, gt_iff_lt, B, bigK]
          refine ENNReal.add_lt_add_of_le_of_lt ?_ ?_ ?_
          ¬∑ refine inv_ne_top.mpr (Ne.symm (ne_of_lt Œ¥pos))
          ¬∑ refine (toReal_le_toReal ?_ ?_).mp ?_
            ¬∑ refine inv_ne_top.mpr (Ne.symm (ne_of_lt Œ¥pos))
            ¬∑ simp only [ne_eq, natCast_ne_top, not_false_eq_true, B, bigK]
            have ceil_cancel : (Œ¥.toReal‚Åª¬π) ‚â§ ‚åàŒ¥.toReal‚Åª¬π‚åâ‚Çä := by
              exact Nat.le_ceil Œ¥.toReal‚Åª¬π
            apply le_trans _ ceil_cancel
            simp
          simp
    -- Closedness
    ¬∑ simp only [one_div, bigK]
      refine isClosed_iInter ?_
      intro n
      refine Finite.isClosed_biUnion ?_ ?_
      ¬∑ refine Finite.ofFinset ?_ fun x ‚Ü¶ ?_
        ¬∑ exact (Finset.Iic (km (n+1)))
        ¬∑ simp only [Finset.mem_Iic, Nat.le_eq, bigK]
          exact Eq.to_iff rfl
      intro i hi
      exact isClosed_closure
  simp_rw [ENNreal_ProbMeasure_toMeasure, ENNReal.coe_le_coe] at bigcalc
  exact bigcalc


-- lemma fivepoint3 {MeasurableSpace X} (MetricSpace X)  (h : IsCompact X) : (inferInstance : TopologicalSpace (LevyProkhorov (ProbabilityMeasure X))) := by
--   sorry

theorem Prokhorov (G : Set (ProbabilityMeasure X)) [PseudoMetricSpace (Measure X)]:
   (TightProb G) ‚Üî (IsCompact (closure G)) := by
  constructor
  ¬∑ sorry
  ¬∑ exact fun a ‚Ü¶ IsTightFamily_of_isRelativelyCompact G a

-- /--Nonsense from here onwards-/
-- variable {A B : Type*} [TopologicalSpace A] {mA : MeasurableSpace A}
--   {Œº ŒΩ : Measure A} {G H : Set (Measure A)}
-- /-- A set of measures `S` is tight if for all `0 < Œµ`, there exists a compact set `K` such that
-- for all `Œº ‚àà S`, `Œº K·∂ú ‚â§ Œµ`.
-- This is formulated in terms of filters, and proven equivalent to the definition above
-- in `IsTightMeasureSet_iff_exists_isCompact_measure_compl_le`. -/
-- def IsTightMeasureSet (S : Set (Measure X)) : Prop :=
--   Tendsto (‚®Ü Œº ‚àà S, Œº) (cocompact X).smallSets (ùìù 0)

-- /-- A set of measures `S` is tight if for all `0 < Œµ`, there exists a compact set `K` such that
-- -- for all `Œº ‚àà S`, `Œº K·∂ú ‚â§ Œµ`. -/
-- lemma IsTightMeasureSet_iff_exists_isCompact_measure_compl_le :
--     IsTightMeasureSet G ‚Üî ‚àÄ Œµ, 0 < Œµ ‚Üí ‚àÉ K : Set A, IsCompact K ‚àß ‚àÄ Œº ‚àà S, Œº (K·∂ú) ‚â§ Œµ := by
--   simp only [IsTightMeasureSet, ENNReal.tendsto_nhds ENNReal.zero_ne_top, gt_iff_lt, zero_add,
--     iSup_apply, mem_Icc, tsub_le_iff_right, zero_le, iSup_le_iff, true_and, eventually_smallSets,
--     mem_cocompact]
--   refine ‚ü®fun h Œµ hŒµ ‚Ü¶ ?_, fun h Œµ hŒµ ‚Ü¶ ?_‚ü©
--   ¬∑ obtain ‚ü®A, ‚ü®K, h1, h2‚ü©, hA‚ü© := h Œµ hŒµ
--     exact ‚ü®K, h1, hA K·∂ú h2‚ü©
--   ¬∑ obtain ‚ü®K, h1, h2‚ü© := h Œµ hŒµ
--     exact ‚ü®K·∂ú, ‚ü®K, h1, subset_rfl‚ü©, fun A hA Œº hŒºS ‚Ü¶ (Œº.mono hA).trans (h2 Œº hŒºS)‚ü©

-- theorem isTightMeasureSet_iff_isCompact_closure
--   {E : Type*} {mE : MeasurableSpace E} [MetricSpace E] [CompleteSpace E]
--   [SecondCountableTopology E] [BorelSpace E] {S : Set (ProbabilityMeasure E)} :
--     IsTightMeasureSet {((Œº : ProbabilityMeasure E) : Measure E) | Œº ‚àà S}
--       ‚Üî IsCompact (closure S) := by sorry


end section
end
end MeasureTheory
--#min_imports
--#lint
--#lint unusedHavesSuffices
