import Mathlib.MeasureTheory.Measure.LevyProkhorovMetric
--set_option maxHeartbeats 400000
--set_option diagnostics true
set_option linter.style.longLine false
set_option linter.unusedTactic false
set_option linter.flexible true
open Topology Metric Filter Set ENNReal NNReal MeasureTheory.ProbabilityMeasure TopologicalSpace

namespace MeasureTheory

open scoped Topology ENNReal NNReal BoundedContinuousFunction

--   simpa [‚Üê ennreal_coeFn_eq_coeFn_toMeasure, ENNReal.tendsto_coe]
--     using tendsto_measure_iUnion_accumulate (Œº := Œº.toMeasure)


variable {X : Type*} [MeasurableSpace X]

lemma nnreal_tsum_ge_onion {Œº : ProbabilityMeasure X} (f : ‚Ñï ‚Üí Set X)
  (hf : Summable fun n ‚Ü¶ Œº (f n)) :
    Œº (‚ãÉ n, f n) ‚â§ ‚àë' n, Œº (f n) := by
  rw [‚Üê ENNReal.coe_le_coe, ENNReal.coe_tsum hf]
  simpa using measure_iUnion_le (Œº := Œº.toMeasure) f

variable [PseudoMetricSpace X] -- may change this to EMetric later

theorem prob_tendsto_measure_iUnion_accumulate {Œ± Œπ : Type*}
    [Preorder Œπ] [IsCountablyGenerated (atTop : Filter Œπ)]
    {_ : MeasurableSpace Œ±} {Œº : Measure Œ±} {f : Œπ ‚Üí Set Œ±} :
    Tendsto (fun i ‚Ü¶ Œº (Accumulate f i)) atTop (ùìù (Œº (‚ãÉ i, f i))) := by
  refine .of_neBot_imp fun h ‚Ü¶ ?_
  have := (atTop_neBot_iff.1 h).2
  rw [measure_iUnion_eq_iSup_accumulate]
  exact tendsto_atTop_iSup fun i j hij ‚Ü¶ by gcongr

-- Definition taken from R√©my's Repository but modified to use ProbabilityMeasure instead of measure. - Need to change this later
def TightProb (S : Set (ProbabilityMeasure X)) : Prop :=
  ‚àÄ Œµ : ‚Ñù‚â•0‚àû, 0 < Œµ ‚Üí ‚àÉ K : Set X, IsCompact K ‚àß ‚àÄ Œº ‚àà S, Œº K·∂ú ‚â§ Œµ

lemma tightProb_iff_nnreal {S : Set (ProbabilityMeasure X)} :
    TightProb S ‚Üî ‚àÄ Œµ : ‚Ñù‚â•0, 0 < Œµ ‚Üí ‚àÉ K : Set X, IsCompact K ‚àß ‚àÄ Œº ‚àà S, Œº K·∂ú ‚â§ Œµ := by
  simp [TightProb, ENNReal.forall_ennreal, ‚ÜêProbabilityMeasure.ennreal_coeFn_eq_coeFn_toMeasure]
  exact fun _ ‚Ü¶ ‚ü®‚àÖ, isCompact_empty‚ü©

variable [OpensMeasurableSpace X]

lemma meas_compl_thang (Œº : ProbabilityMeasure X) (km : ‚Ñï ‚Üí ‚Ñï) (m:‚Ñï) (D : ‚Ñï ‚Üí X) :
  Œº (‚ãÉ i, ‚ãÉ (_ : i ‚â§ km (m + 1)), closure (ball (D i) (1 / (‚Üëm + 1)))) +
  Œº (‚ãÉ i, ‚ãÉ (_ : i ‚â§ km (m + 1)), closure (ball (D i) (1 / (‚Üëm + 1))))·∂ú = 1 := by
    refine ENNReal.coe_eq_one.mp ?_
    push_cast
    have liyg : ‚Üë(Œº (‚ãÉ i, ‚ãÉ (_ : i ‚â§ km (m + 1)), closure (ball (D i) (1 / ((m:‚Ñù) + 1))))·∂ú) = Œº.toMeasure ((‚ãÉ i, ‚ãÉ (_ : i ‚â§ km (m + 1)), closure (ball (D i) (1 / ((m:‚Ñù) + 1)))))·∂ú := by
      simp
    have liyg2 : ‚Üë(Œº (‚ãÉ i, ‚ãÉ (_ : i ‚â§ km (m + 1)), closure (ball (D i) (1 / ((m:‚Ñù) + 1))))) = Œº.toMeasure (‚ãÉ i, ‚ãÉ (_ : i ‚â§ km (m + 1)), closure (ball (D i) (1 / (‚Üëm + 1)))) := by
      simp
    rw [liyg]
    rw [liyg2]
    refine prob_add_prob_compl ?_
    refine Finite.measurableSet_biUnion ?_ ?_
    ¬∑ refine finite_iff_bddAbove.mpr ?_
      refine bddAbove_def.mpr ?_
      use km (m + 1)
      intro y hy
      exact hy
    ¬∑ intro b hb
      exact measurableSet_closure

variable [SeparableSpace X]
noncomputable section

variable (S : Set (ProbabilityMeasure X))

abbrev P := LevyProkhorov.equiv (ProbabilityMeasure X)

abbrev T := P‚Åª¬π' S

lemma claim5point2 (U : ‚Ñï ‚Üí Set X) (O : ‚àÄ i, IsOpen (U i))
    (hcomp: IsCompact (closure S)) (Œµ : ‚Ñù) (heps : Œµ > 0) (Cov : ‚ãÉ i, U i = univ):
    ‚àÉ (k : ‚Ñï), ‚àÄ Œº ‚àà S, Œº (‚ãÉ (i ‚â§ k), U i) > 1 - Œµ := by
  by_contra! nh
  choose Œº hŒº hŒºŒµ using nh
  --exact hcomp.mem_of_is_closed (IsClosed.closure hcomp.is_closed)
  obtain ‚ü®Œºnew, hŒºtwo, sub, tub, bub‚ü© := hcomp.isSeqCompact (fun n =>  subset_closure <| hŒº n)
  have thing n := calc
    (Œºnew (‚ãÉ (i ‚â§ n), U i) : ‚Ñù)
    _ ‚â§ liminf (fun k => (Œº (sub k) (‚ãÉ (i ‚â§ n), U i) : ‚Ñù)) atTop := by
      have hopen : IsOpen (‚ãÉ i ‚â§ n, U i) := by
        exact isOpen_biUnion fun i a => O i
      --This is the key lemma
      have := ProbabilityMeasure.le_liminf_measure_open_of_tendsto bub hopen
      simp only [Function.comp_apply, ‚Üê ProbabilityMeasure.ennreal_coeFn_eq_coeFn_toMeasure] at this
      simp at this
      rw [toReal_liminf]
      norm_cast
      rw [‚ÜêProbabilityMeasure.ennreal_coeFn_eq_coeFn_toMeasure] at this
      simp_rw [‚ÜêProbabilityMeasure.ennreal_coeFn_eq_coeFn_toMeasure] at this
      rw [‚ÜêofNNReal_liminf] at this
      norm_cast at this
      use 1
      simp
      intro a x h
      specialize h x (by simp)
      apply h.trans
      exact ProbabilityMeasure.apply_le_one (Œº (sub x)) (‚ãÉ i ‚â§ n, U i)
    _ ‚â§ liminf (fun k => (Œº (sub k) (‚ãÉ (i ‚â§ sub k), U i) : ‚Ñù)) atTop := by
      apply Filter.liminf_le_liminf
      ¬∑ simp
        use n + 1
        intro b hypo
        refine (Œº (sub b)).apply_mono <| Set.biUnion_mono (fun i (hi : i ‚â§ n) ‚Ü¶ hi.trans ?_) fun _ _ ‚Ü¶ le_rfl
        apply le_trans _ (le_trans hypo _)
        norm_num
        exact StrictMono.le_apply tub
      ¬∑ simp [autoParam]
        use 0
        simp
      ¬∑ simp [autoParam]
        use 1
        simp
        intro a d hyp
        specialize hyp d (by simp)
        apply hyp.trans
        norm_cast
        exact ProbabilityMeasure.apply_le_one (Œº (sub d)) (‚ãÉ i ‚â§ sub d, U i)
    _ ‚â§ 1 - Œµ := by
      apply Filter.liminf_le_of_le
      ¬∑ use 0
        simp
      ¬∑ simp only [eventually_atTop, ge_iff_le, forall_exists_index]
        intros b c h
        refine le_trans (h c le_rfl) (hŒºŒµ _)
  have cdiction : Tendsto (fun n => Œºnew (‚ãÉ i ‚â§ n, U i)) atTop (ùìù 1) := by
    have re : Tendsto (fun n => Œºnew (‚ãÉ i ‚â§ n, U i)) atTop (ùìù (Œºnew (‚ãÉ i, U i))) := by
      -- congr
      simp_rw [‚ÜêSet.accumulate_def]
      exact ProbabilityMeasure.tendsto_measure_iUnion_accumulate
    rw [Cov] at re
    simp at re
    exact re

  have oop : ‚àÄ·∂† n in atTop, Œºnew (‚ãÉ i ‚â§ n, U i) ‚â• 1 - Œµ / 2 := by
    apply Tendsto.eventually_const_le (v := 1)
    norm_num
    positivity
    rw [‚ÜêNNReal.tendsto_coe] at cdiction
    exact cdiction

  suffices ‚àÄ·∂† n : ‚Ñï in atTop, False by exact this.exists.choose_spec
  filter_upwards [oop] with n hn
  have whatever := hn.trans (thing n)
  linarith



lemma geom_series : ‚àë' (x : ‚Ñï), ((2:‚Ñù) ^ (x+1))‚Åª¬π = 1 := by
  have frac : ‚àë' (x : ‚Ñï), ((2 ^ (x+1)) : ‚Ñù)‚Åª¬π = ‚àë' (x : ‚Ñï), (1 / 2) ^ (x+1) := by
    congr
    simp
  rw [frac]
  have gethalf : ‚àë' (x : ‚Ñï), ((1 : ‚Ñù) / 2) ^ (x + 1) = 1/2 * (‚àë' (x : ‚Ñï), 1 / 2 ^ x) := by
    have robert : ‚àë' (x : ‚Ñï), ((1 : ‚Ñù) / 2) ^ (x + 1) = ‚àë' (x : ‚Ñï), (1/2) * (1 / 2) ^ x := by
      simp
      congr
      field_simp
      congr! with x
      exact pow_succ' 2 x
    rw [robert]
    simp
    simp_all only [one_div, inv_pow]
    exact _root_.tsum_mul_left
  rw [gethalf]
  field_simp
  have sdfdhf : ‚àë' (x : ‚Ñï), 1 / 2 ^ x = ‚àë' n : ‚Ñï, ((1 : ‚Ñù) / 2) ^ n := by
    simp_all only [one_div, inv_pow]
  rw [sdfdhf]
  exact tsum_geometric_two

    --have eq : ‚àë' (x : ‚Ñï), (1 / 2) ^ x = 1 / (1 - 1 / 2) := by



variable [CompleteSpace X]

lemma geomsery (Œµ : ‚Ñù‚â•0) : (‚àë' (m : ‚Ñï), Œµ * 2 ^ (-(m+1) : ‚Ñ§) : NNReal) = Œµ := by
  rw [NNReal.tsum_mul_left]
  nth_rw 2 [‚Üêmul_one (a :=Œµ)]
  congr
  have form : ‚àë' (x : ‚Ñï), 2 ^ (-((x:‚Ñ§) + 1)) = ‚àë' (x : ‚Ñï), ((2:‚Ñù) ^ (x+1))‚Åª¬π := by
    congr
  refine NNReal.coe_eq_one.mp ?_
  push_cast
  rw [form]
  exact geom_series

lemma better : ‚àÄ m:‚Ñï, (2 : NNReal) ^ (-(1:‚Ñ§) + -(m:‚Ñ§)) = 1 / 2 * (1 / 2) ^ m := by
  intro m
  field_simp
  rw [‚Üê @Int.neg_add]
  rw [@zpow_neg]--rw [‚Üênpow_add (n:=(m:‚Ñï)) (k:=1) (x:=2)]
  refine (inv_mul_eq_one‚ÇÄ ?_).mpr ?_
  ¬∑ refine zpow_ne_zero (1 + m) (by simp)
  ¬∑ refine zpow_one_add‚ÇÄ (by simp) m

theorem IsTightFamily_of_isRelativelyCompact (hcomp : IsCompact (closure S)) :
    TightProb S := by
  rw [tightProb_iff_nnreal]
  by_cases hempty : ¬¨Nonempty X
  ¬∑ simp at hempty
    intro Œµ Œµpos
    use ‚àÖ
    constructor
    ¬∑ exact isCompact_empty
    intro Œº hŒº
    rw [‚Üê @univ_eq_empty_iff] at hempty
    rw [‚Üê hempty]
    simp_all
    rw [‚Üê ENNReal.coe_le_coe]
    simp
  simp at hempty

  -- Introduce Œµ > 0 for which we need to find a compact set K with Œº(K) ‚â• 1 - Œµ for all Œº ‚àà S
  intro Œµ Œµpos
  obtain ‚ü®D, fD‚ü© := exists_dense_seq X
  --obtain ‚ü®œÜ, hœÜ‚ÇÅ, hœÜ‚ÇÇ, hœÜ‚ÇÉ‚ü© := exists_seq_strictAnti_tendsto (0 : ‚Ñù)
  -- For each m ‚â• 1, cover X with balls of radius 1/m around points in the dense subset D
  have hcov : ‚àÄ m : ‚Ñï, ‚ãÉ i, ball (D i) (1 / (m+1)) = univ := by
    rw [denseRange_iff] at fD
    intro m
    ext p
    constructor
    ¬∑ exact fun a ‚Ü¶ trivial
    specialize fD p
    specialize fD (1 / (m+1))
    intro hp
    have hmdiv : 1 / ((m : ‚Ñù) + 1) > 0 := by
      exact Nat.one_div_pos_of_nat
    specialize fD hmdiv
    exact mem_iUnion.mpr fD

  -- have byclam : ‚àÄ Œº ‚àà S, ‚àÄ (m : ‚Ñï), ‚àÉ (k : ‚Ñï), Œº (‚ãÉ i ‚â§ k, ball (D i) (œÜ m)) > 1 - (Œµ * 2 ^ (-m : ‚Ñ§) : ‚Ñù) := by
  --   intro Œº hŒº m
  --   -- I am sure there is an easier way to do this - I found it!
  --   let m' := m + 1
  --   let Œµ' := (Œµ * 2 ^ (-m : ‚Ñ§)).toReal
  --   have fiveee : ‚àÉ (k : ‚Ñï), ‚àÄ Œº ‚àà S, Œº (‚ãÉ (i ‚â§ k), ball (D i) (œÜ m)) > 1 - Œµ' := by
  --     apply claim5point2 (S := S) (U := fun i => ball (D i) (œÜ m)) (Œµ := Œµ') (heps := _)
  --     ¬∑ exact fun i ‚Ü¶ isOpen_ball
  --     ¬∑ exact hcomp
  --     ¬∑ simp_all only [ge_iff_le, one_div]
  --     ¬∑ intro O hcomp_1
  --       simp_all only [gt_iff_lt, Œµ']
  --       simp [Œµpos]
  --   obtain ‚ü®w, h‚ü© := fiveee
  --   use w
  --   exact h Œº hŒº
  have byclam : ‚àÄ (m : ‚Ñï), ‚àÉ (k : ‚Ñï),‚àÄ Œº ‚àà S, Œº (‚ãÉ i ‚â§ k, ball (D i) (1 / (m+1))) > 1 - (Œµ * 2 ^ (-m : ‚Ñ§) : ‚Ñù) := by
    intro m
    let Œµ' :=  (Œµ : ‚Ñù) * 2 ^ (-m : ‚Ñ§)
    apply claim5point2 (S := S) (U := fun i => ball (D i) (1 / (m+1))) (Œµ := Œµ') (heps := _)
    ¬∑ intro i
      exact isOpen_ball
    ¬∑ exact hcomp
    ¬∑ exact hcov m
    ¬∑ intro h _
      positivity

  choose! km hbound using id byclam
  simp_all only [zpow_neg, zpow_natCast]
  let bigK := ‚ãÇ m, ‚ãÉ (i ‚â§ km (m+1)), closure (ball (D i) (1 / (m+1)))
  --This is proven ahead of our calc block as it will need to be called
  --multiple times inside to satisfy tsum's need to show summability
  -- I had to do it inside the actual proof term because this particular
  -- inequality required all our assumptions to be in scope
  have lt_geom_series : ‚àÄ (Œº : ProbabilityMeasure X), Œº ‚àà S ‚Üí ‚àë' (m : ‚Ñï), (1 - Œº (‚ãÉ i, ‚ãÉ (_ : i ‚â§ km (m + 1)), closure (ball (D i) (1 / (‚Üëm + 1))))) < ‚àë' (m : ‚Ñï), Œµ * 2 ^ (-((m:‚Ñ§) + 1)) := by
    intro Œº hs
    refine NNReal.tsum_strict_mono ?_ ?_
    ¬∑ rw [summable_mul_left_iff] --Show it is summable
      ¬∑ field_simp
        simp_rw [better]
        simp
        rw [summable_mul_left_iff]
        ¬∑ field_simp
          have ugh : (Summable fun m ‚Ü¶ ((1 / 2 ^ m) : ‚Ñù‚â•0)) ‚Üî (Summable fun m ‚Ü¶ ((1:‚Ñù) / 2) ^ m) := by
            simp
            exact summable_mk fun n ‚Ü¶ Nonneg.inv._proof_1 (2 ^ n)
          rw [ugh]
          exact summable_geometric_two
        ¬∑ simp
      ¬∑ exact Ne.symm (ne_of_lt Œµpos)
    ¬∑ rw [Pi.lt_def]
      constructor
      ¬∑ intro m
        specialize hbound (m+1) Œº hs
        refine tsub_le_iff_tsub_le.mp ?_
        apply le_of_lt at hbound
        simp; simp at hbound
        refine one_le_coe.mp ?_
        apply le_trans hbound
        push_cast
        refine add_le_add ?_ ?_
        ¬∑ gcongr
          refine apply_mono Œº ?_
          refine iUnion‚ÇÇ_mono ?_
          intro i hi
          rw [@subset_def]
          intro x hx
          rw [@mem_ball'] at hx
          rw [@EMetric.mem_closure_iff_infEdist_zero]
          refine EMetric.infEdist_zero_of_mem ?_
          rw [@mem_ball']
          apply hx.trans
          field_simp
          refine (one_div_lt_one_div (by positivity) (by positivity)).mpr (by simp)
        ¬∑ congr!
          rw [‚Üê @Int.neg_add, @zpow_neg]
          congr!
          norm_cast
          simp
          exact Nat.add_comm m 1
      ¬∑ use 0
        specialize hbound 1 Œº hs
        simp; simp at hbound
        refine NNReal.coe_lt_coe.mp ?_
        simp
        rw [@sub_lt_comm]
        apply hbound.trans_le
        norm_cast
        simp
        refine apply_mono Œº ?_
        refine iUnion‚ÇÇ_mono ?_
        intro i hi
        rw [@subset_def]
        intro x hx
        rw [@mem_ball'] at hx
        rw [@EMetric.mem_closure_iff_infEdist_zero]
        refine EMetric.infEdist_zero_of_mem ?_
        rw [@mem_ball']
        apply hx.trans
        linarith
  have tsumMeasureCompl (Œº : ProbabilityMeasure X): ‚àë' (m : ‚Ñï), Œº (‚ãÉ i, ‚ãÉ (_ : i ‚â§ km (m + 1)), closure (ball (D i) (1 / (‚Üëm + 1))))·∂ú =
  ‚àë' (m : ‚Ñï), (1 - Œº (‚ãÉ i, ‚ãÉ (_ : i ‚â§ km (m + 1)), closure (ball (D i) (1 / (‚Üëm + 1))))) := by
    congr! with m
    refine ENNReal.coe_inj.mp ?_
    rw [@ennreal_coeFn_eq_coeFn_toMeasure, measure_compl ?_ ?_]
    ¬∑ simp
    ¬∑ refine Finite.measurableSet_biUnion ?_ ?_
      ¬∑ simp only [Nat.le_eq]
        refine BddAbove.finite ?_
        refine bddAbove_def.mpr ?_
        use km (m + 1) + 1
        intro y
        rw [@mem_def]
        omega
      ¬∑ intro b _
        exact measurableSet_closure
    ¬∑ simp


  have bigcalc (Œº : ProbabilityMeasure X) (hs : Œº ‚àà S) := calc
    Œº (bigK)·∂ú
    _ = Œº (‚ãÉ m,(‚ãÉ (i ‚â§ km (m+1)), closure (ball (D i) (1 / (m+1))))·∂ú) := by
      simp only [bigK]
      simp only [compl_iInter, compl_iUnion, bigK]
    _ ‚â§ ‚àë' m, Œº ((‚ãÉ (i ‚â§ km (m+1)), closure (ball (D i) (1 / (m+1))))·∂ú) := by
      apply nnreal_tsum_ge_onion
      rw [‚Üê @tsum_coe_ne_top_iff_summable]
      -- Can possibly cut this shorter here
      refine lt_top_iff_ne_top.mp ?_
      refine lt_iff_exists_real_btwn.mpr ?_
      use Œµ
      refine ‚ü® ?_, ?_, ?_‚ü©
      ¬∑ exact zero_le_coe
      ¬∑ rw [‚Üêgeomsery Œµ]
        simp only [ennreal_coeFn_eq_coeFn_toMeasure, ofReal_coe_nnreal]
        have ljbdfi : ‚àë' (b : ‚Ñï), Œº.toMeasure (‚ãÉ i, ‚ãÉ (_ : i ‚â§ km (b + 1)), closure (ball (D i) (1 / (‚Üëb + 1))))·∂ú
         = ‚àë' (m : ‚Ñï), (1 - Œº (‚ãÉ i, ‚ãÉ (_ : i ‚â§ km (m + 1)), closure (ball (D i) (1 / (‚Üëm + 1))))) := by
          rw [‚Üê tsumMeasureCompl]
          have klfb : ‚Üë(‚àë' (m : ‚Ñï), Œº (‚ãÉ i, ‚ãÉ (_ : i ‚â§ km (m + 1)), closure (ball (D i) (1 / ((m:‚Ñù) + 1))))·∂ú) =
            (‚àë' (m : ‚Ñï), Œº.toMeasure (‚ãÉ i ‚â§ km (m + 1), closure (ball (D i) (1 / ((m:‚Ñù) + 1))))·∂ú) := by
              --rw [@coeFn_def]
              rw [@tsum_eq_toNNReal_tsum]
              simp
              refine coe_toNNReal ?_
              refine lt_top_iff_ne_top.mp ?_
              refine lt_iff_exists_nnreal_btwn.mpr ?_
              use Œµ
              constructor
              ¬∑ sorry
              ¬∑ exact coe_lt_top
              --rw [ENNReal.tsum_toNNReal_eq]




          exact id (Eq.symm klfb)



        rw [ljbdfi]
        exact coe_lt_coe_of_lt (lt_geom_series Œº hs)


        -- have eq : ‚àë' (b : ‚Ñï), Œº.toMeasure (‚ãÇ i, ‚ãÇ (_ : i ‚â§ km (b+1)), (closure (ball (D i) (b+1)‚Åª¬π))·∂ú) = ‚àë' m, (1 - Œº (‚ãÉ (i ‚â§ km (m+1)), closure (ball (D i) (1 / (m+1))))) := by
        --   have compl : ‚àë' m, Œº ((‚ãÉ (i ‚â§ km (m+1)), closure (ball (D i) (1 / (m+1))))·∂ú) = ‚àë' m, (1 - Œº (‚ãÉ (i ‚â§ km (m+1)), closure (ball (D i) (1 / (m+1))))) := by
        --     congr
        --     ext m
        --     congr
        --     refine Eq.symm (tsub_eq_of_eq_add ?_)
        --     apply Eq.symm
        --     rw [add_comm]
        --     exact meas_compl_thang Œº km m D
        --   rw [‚Üêcompl]
        --   have push_coerce : ‚Üë(‚àë' (m : ‚Ñï), Œº (‚ãÉ i, ‚ãÉ (_ : i ‚â§ km (m + 1)), closure (ball (D i) (1 / (‚Üëm + 1))))·∂ú) = ‚àë' (m : ‚Ñï), Œº.toMeasure (‚ãÉ i, ‚ãÉ (_ : i ‚â§ km (m + 1)), closure (ball (D i) (1 / (‚Üëm + 1))))·∂ú := by
        --     sorry
        --   rw [push_coerce]
        --   congr
        --   simp

        -- -- have lt_geomser : ‚àë' m, (1 - Œº (‚ãÉ (i ‚â§ km (m+1)), closure (ball (D i) (1 / (m+1))))) < (‚àë' (m : ‚Ñï), Œµ * 2 ^ (-(m+1) : ‚Ñ§) : NNReal) := by
        -- --   apply?
        -- rw [eq]
        -- gcongr
        -- rw [‚Üê geomsery Œµ]
        -- exact lt_geom_series Œº hs
      ¬∑ simp only [ofReal_coe_nnreal, coe_lt_top, bigK]
    _ = ‚àë' m, (1 - Œº (‚ãÉ (i ‚â§ km (m+1)), closure (ball (D i) (1 / (m+1))))) := by
      exact tsumMeasureCompl Œº
    _ < (‚àë' (m : ‚Ñï), Œµ * 2 ^ (-(m+1) : ‚Ñ§) : NNReal) := by
      exact lt_geom_series Œº hs
    _ = Œµ := by exact geomsery Œµ
  by_cases hsempty : S = ‚àÖ
  ¬∑ use ‚àÖ
    constructor
    ¬∑ exact isCompact_empty
    ¬∑ intro Œº hŒº
      subst hsempty
      simp_all only [isClosed_empty, IsClosed.closure_eq, finite_empty, Finite.isCompact, mem_empty_iff_false,
        not_isEmpty_of_nonempty, iUnion_of_empty, gt_iff_lt, IsEmpty.exists_iff, implies_true, IsEmpty.forall_iff,
        iInter_of_empty, compl_univ, bigK]
  -- Final proof
  use bigK
  constructor
  -- Compactness first
  ¬∑ refine isCompact_of_totallyBounded_isClosed ?_ ?_
    --Totally bounded
    ¬∑ refine EMetric.totallyBounded_iff.mpr ?_
      intro Œ¥ Œ¥pos
      by_cases Œ¥fin : Œ¥ = ‚ä§
      ¬∑ obtain ‚ü®x‚ü© := hempty
        use {x}
        constructor
        ¬∑ exact finite_singleton x
        simp [Œ¥fin]
      apply nonempty_iff_ne_empty'.mpr at hsempty
      --specialize hempty Classical.choice
      -- t should be image under D of the set of numbers less than km of 1/Œ¥.ceil
      use Set.image D (Finset.Icc 0 (km (‚åà1 / Œ¥.toReal‚åâ‚Çä + 1)))
      constructor
      ¬∑ exact toFinite (D '' ‚Üë(Finset.Icc 0 (km (‚åà1 / Œ¥.toReal‚åâ‚Çä + 1))))
      ¬∑ simp [bigK]
        have interthing : ‚àÄ t, ‚ãÇ m, ‚ãÉ i, ‚ãÉ (_ : i ‚â§ km (m + 1)), closure (ball (D i) (‚Üëm + 1)‚Åª¬π) ‚äÜ ‚ãÉ i, ‚ãÉ (_ : i ‚â§ km (t + 1)), closure (ball (D i) (‚Üët + 1)‚Åª¬π) := by
          exact fun t ‚Ü¶ iInter_subset_of_subset t fun ‚¶Éa‚¶Ñ a ‚Ü¶ a
        specialize interthing (‚åàŒ¥.toReal‚Åª¬π‚åâ‚Çä)
        apply interthing.trans
        gcongr with i hi
        intro x hx
        rw [@EMetric.mem_ball']
        rw [@EMetric.mem_closure_iff] at hx
        let B : ‚Ñù‚â•0‚àû := Œ¥ - (‚ÜëŒ¥‚Åª¬π + (1 / 2: ‚Ñù‚â•0‚àû))‚Åª¬π
        specialize hx B
        have Bpos : 0 < B := by
          simp [B]; field_simp; refine div_lt_of_lt_mul ?_
          ring_nf; refine ENNReal.lt_add_of_sub_lt_left ?_ ?_
          left; exact one_ne_top
          field_simp; rw [@ENNReal.div_eq_inv_mul]
          rw [ENNReal.inv_mul_cancel (ne_of_gt Œ¥pos) Œ¥fin]
          simp; exact pos_iff_ne_zero.mp Œ¥pos
        specialize hx Bpos
        obtain ‚ü®y, hy, hyd‚ü© := hx
        rw [@mem_ball', ‚Üê @edist_lt_ofReal] at hy
        apply lt_of_le_of_lt (edist_triangle _ y _)
        rw [edist_comm] at hyd
        have greivance_dos : (ENNReal.ofReal (‚Üë‚åàŒ¥.toReal‚Åª¬π‚åâ‚Çä + 1)‚Åª¬π) = ((‚åàŒ¥.toReal‚Åª¬π‚åâ‚Çä + 1):‚Ñù‚â•0‚àû)‚Åª¬π := by
            refine (toReal_eq_toReal_iff' (by simp) (by simp)).mp ?_
            rw [toReal_ofReal]
            simp; norm_cast; positivity
          --rw [ofReal_toReal]
        rw [greivance_dos] at hy
        have le_sum : edist (D i) y + edist y x < ((‚Üë‚åàŒ¥.toReal‚Åª¬π‚åâ‚Çä + 1):‚Ñù‚â•0‚àû)‚Åª¬π + B := by
          exact ENNReal.add_lt_add hy hyd
        apply le_sum.trans; simp [B]
        refine lt_tsub_iff_left.mp ?_
        refine sub_lt_of_sub_lt ?_ ?_ ?_
        ¬∑ rw [@inv_le_iff_inv_le]
          simp
        ¬∑ left; exact Œ¥fin
        ¬∑ field_simp
          have subsub : Œ¥ - (Œ¥ - 1 / (‚Üë‚åà1 / Œ¥.toReal‚åâ‚Çä + 1)) = 1 / (‚Üë‚åà1 / Œ¥.toReal‚åâ‚Çä + 1) := by
            refine ENNReal.sub_sub_cancel Œ¥fin ?_
            simp
            rw [@inv_le_iff_inv_le]
            refine le_add_of_le_of_nonneg ?_ ?_
            ¬∑ refine (toReal_le_toReal ?_ (natCast_ne_top ‚åàŒ¥.toReal‚Åª¬π‚åâ‚Çä)).mp ?_
              ¬∑ simp; exact pos_iff_ne_zero.mp Œ¥pos
              ¬∑ simp
                have coersion : Œ¥.toReal‚Åª¬π ‚â§ ‚åàŒ¥.toReal‚Åª¬π‚åâ‚Çä := by
                  exact Nat.le_ceil Œ¥.toReal‚Åª¬π
                apply coersion.trans; rfl
            simp
          rw [subsub]
          simp
          refine ENNReal.add_lt_add_of_le_of_lt ?_ ?_ ?_
          ¬∑ refine inv_ne_top.mpr (Ne.symm (ne_of_lt Œ¥pos))
          ¬∑ refine (toReal_le_toReal ?_ ?_).mp ?_
            ¬∑ refine inv_ne_top.mpr (Ne.symm (ne_of_lt Œ¥pos))
            ¬∑ simp only [ne_eq, natCast_ne_top, not_false_eq_true, B, bigK]
            have ceil_cancel : (Œ¥.toReal‚Åª¬π) ‚â§ ‚åàŒ¥.toReal‚Åª¬π‚åâ‚Çä := by
              exact Nat.le_ceil Œ¥.toReal‚Åª¬π
            apply le_trans _ ceil_cancel
            simp
          simp
    -- Closedness
    ¬∑ simp [bigK]
      refine isClosed_iInter ?_
      intro n
      refine Finite.isClosed_biUnion ?_ ?_
      ¬∑ refine Finite.ofFinset ?_ fun x ‚Ü¶ ?_
        ¬∑ exact (Finset.Iic (km (n+1)))
        ¬∑ simp
          exact Eq.to_iff rfl
      intro i hi
      exact isClosed_closure
  exact fun Œº a ‚Ü¶ le_of_lt (bigcalc Œº a)


-- lemma fivepoint3 {MeasurableSpace X} (MetricSpace X)  (h : IsCompact X) : (inferInstance : TopologicalSpace (LevyProkhorov (ProbabilityMeasure X))) := by
--   sorry

theorem Prokhorov (G : Set (ProbabilityMeasure X)) [PseudoMetricSpace (Measure X)]:
   (TightProb G) ‚Üî (IsCompact (closure G)) := by
  constructor
  ¬∑ sorry
  ¬∑ exact fun a ‚Ü¶ IsTightFamily_of_isRelativelyCompact G a


end section
end
end MeasureTheory
--#min_imports
--#lint
--#lint unusedHavesSuffices
