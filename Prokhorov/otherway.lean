--import Mathlib
import Mathlib.MeasureTheory.Measure.LevyProkhorovMetric
--import Mathlib.Topology.MetricSpace.Embedding
--import Mathlib.Topology.MetricSpace.HilbertCube
import Prokhorov.Mathlib.Topology.Algebra.InfiniteSum.Basic

set_option autoImplicit false

open TopologicalSpace MeasureTheory.ProbabilityMeasure Module--Analysis

namespace ENNReal

@[simp] lemma nsmul_eq_mul (n : ‚Ñï) (x : ‚Ñù‚â•0‚àû) : n ‚Ä¢ x = n * x := by cases x <;> simp

end ENNReal

variable {G : Type*} [PseudoMetricSpace G] [CompactSpace G] [SeparableSpace G]
  [MeasurableSpace G] [OpensMeasurableSpace G]

namespace MeasureTheory
noncomputable section
instance psm : PseudoMetricSpace (LevyProkhorov <| ProbabilityMeasure G) :=
  levyProkhorovDist_pseudoMetricSpace_probabilityMeasure


instance levyProkhorovCompact : CompactSpace (LevyProkhorov (ProbabilityMeasure G)) := by
  have hSeparability : SeparableSpace G := by infer_instance
  --let C : G ‚Üí ‚Ñù := Dual G
  -- instance : NormedSpace ‚Ñù C(G, ‚Ñù) :=
  sorry


--open scoped Interval MeasureTheory

open Topology Metric Filter Set ENNReal NNReal MeasureTheory.ProbabilityMeasure TopologicalSpace

def IsTightMeasureSet (S : Set (Measure G)) : Prop :=
  Tendsto (‚®Ü Œº ‚àà S, Œº) (cocompact G).smallSets (ùìù 0)

variable (S : Set <| Measure G)
--Useful version
lemma IsTightMeasureSet_iff_exists_isCompact_measure_compl_le :
    IsTightMeasureSet S ‚Üî ‚àÄ Œµ, 0 < Œµ ‚Üí ‚àÉ K : Set G, IsCompact K ‚àß ‚àÄ Œº ‚àà S, Œº (K·∂ú) ‚â§ Œµ := by sorry


def TightProb (S : Set (ProbabilityMeasure G)) : Prop :=
  ‚àÄ Œµ : ‚Ñù‚â•0‚àû, 0 < Œµ ‚Üí ‚àÉ K : Set G, IsCompact K ‚àß ‚àÄ Œº ‚àà S, Œº K·∂ú ‚â§ Œµ

lemma Tightprob_iff_Tight {S : Set (ProbabilityMeasure G)} :
  TightProb S ‚Üî IsTightMeasureSet {((Œº : ProbabilityMeasure G) : Measure G) | Œº ‚àà S} := by
  sorry

open Bornology
open scoped Topology ENNReal NNReal BoundedContinuousFunction

variable {E : Type*}
  {X : Type*} [MetricSpace X] [SeparableSpace X] [Nonempty X]
def Œº : Measure ‚Ñï := Measure.sum (fun i => (2‚Åª¬π  : NNReal)^i ‚Ä¢ Measure.dirac i)

@[simp]
lemma iUnion_pure : (‚®Ü i, pure i: Filter ‚Ñï) = ‚ä§ := by
  ext i; constructor
  ¬∑ intro hi;
    simp_all only [mem_iSup, mem_pure, mem_top]
    ext x
    simp_all only [mem_univ]
  ¬∑ intro hi; simp_all only [mem_top, univ_mem]

@[simp] lemma ae_Œº : ae Œº = ‚ä§ := by
  simp [ae_eq_top]
  intro a
  simp[Œº]

def equiv (s : Set (‚Ñï ‚Üí ‚Ñù)) (hs : ‚àÉ t : Set ‚Ñù, IsBounded t ‚àß s ‚äÜ Set.univ.pi fun _ ‚Ü¶ t) :
    s ‚âÉ ((‚áë) ‚Åª¬π' s : Set (Lp ‚Ñù 1 Œº)) where
  toFun f := by
    refine ‚ü®MemLp.toLp f ?_, ?_‚ü©
    ¬∑ simp [MemLp]
      constructor
      ¬∑ measurability
      simp [eLpNorm, eLpNorm'];
      obtain ‚ü®bigset, bd, bigsetbound‚ü© := hs
      rw [lintegral_countable']
      have (a) : ‚Äñ(f : ‚Ñï ‚Üí ‚Ñù) a‚Äñ‚Çë < ‚ä§ := by
        simp
      rw [@isBounded_iff_forall_norm_le] at bd
      obtain ‚ü®C, hC‚ü© := bd
      have sdo : (‚àÄ a, ‚Äñ(f : ‚Ñï ‚Üí ‚Ñù) a‚Äñ‚Çë ‚â§ (C.toNNReal)) := by
        intro a
        specialize hC ((f : ‚Ñï ‚Üí ‚Ñù) a)
        have bob : (f : ‚Ñï ‚Üí ‚Ñù) a ‚àà bigset := by aesop
        specialize hC bob
        rw [Real.norm_eq_abs] at hC
        rw [@enorm_le_coe]
        exact NNReal.le_toNNReal_of_coe_le hC
      have mulrw : ‚àë' (a : ‚Ñï), ‚Äñ(f : ‚Ñï ‚Üí ‚Ñù) a‚Äñ‚Çë * Œº {a} ‚â§ ‚àë' (a : ‚Ñï), C.toNNReal * Œº {a} := by
        gcongr with a
        exact sdo a
      apply mulrw.trans_lt
      rw [ENNReal.tsum_mul_left]
      refine mul_lt_top (by simp) ?_
      simp [Œº]
      simp [indicator, ENNReal.smul_def]
      simp_rw [ENNReal.inv_pow, tsum_geometric, one_sub_inv_two, inv_inv, ofNat_lt_top]
    ¬∑ simp
      convert f.2
      simpa using MemLp.coeFn_toLp (Œº := Œº) _
  invFun f := ‚ü®f, f.2‚ü©
  left_inv f := by ext : 1; simpa using MemLp.coeFn_toLp (Œº := Œº) _
  right_inv f := by simp

def Y : Set (Lp ‚Ñù 1 Œº) :=  (fun x => ‚áëx)‚Åª¬π' {f | ‚àÄ n, f n ‚àà Icc (0 : ‚Ñù) 1}

lemma Compacty : CompactSpace Y := by
  sorry -- refine compactSpace_iff_isBounded_univ.mpr ?_ ?_

variable (a := Classical.choose (exists_dense_seq X))

def T (x : X) : Y := equiv {
    val n := min 1 (dist x <| Classical.choose (exists_dense_seq X) n)
    property :=
  }

theorem homeo_to_compact_space {X : Type*} [MetricSpace X] [SeparableSpace X] :
    ‚àÉ (T : X ‚Üí Y), IsEmbedding T := by--Maybe build T explicitly first?
    -- obtain ‚ü®D, fD‚ü© := TopologicalSpace.exists_countable_dense X
      sorry


lemma Tight_closure_if_tight (S : Set (ProbabilityMeasure G)):
  IsTightMeasureSet {((Œº : ProbabilityMeasure G) : Measure G) | Œº ‚àà S} ‚Üí
  TightProb (closure S) := by
  intro ht
  simp [TightProb]; intro Œµ hŒµ
  rw [‚Üê Tightprob_iff_Tight, TightProb] at ht
  specialize ht Œµ hŒµ
  obtain ‚ü®K,hc, htight‚ü© := ht; use K
  constructor
  ¬∑ simpa
  intro Œº hŒº


lemma Compact_if_tight {S : Set (ProbabilityMeasure G)}
(ht : IsTightMeasureSet {((Œº : ProbabilityMeasure G) : Measure G) | Œº ‚àà S}) :
  IsCompact (closure S) := by
  by_cases hempty : IsEmpty (closure S)
  ¬∑ simp_all only [isEmpty_coe_sort, isClosed_empty, IsClosed.closure_eq,
    finite_empty, Finite.isCompact]
  rw [not_isEmpty_iff] at hempty
  --rw [‚ÜêTightprob_iff_Tight, TightProb] at ht
  rw [@IsTightMeasureSet_iff_exists_isCompact_measure_compl_le] at ht
  --simp [IsCompact]
  obtain ‚ü®Œº , hŒº‚ü© := hempty
  --choose! Œµ using ht
  have tightness (Œµ : ENNReal) (hŒµ : Œµ > 0):
    ‚àÉ (K : Set G), IsCompact K ‚àß Œº K ‚â• 1 - Œµ := by
    specialize ht Œµ hŒµ
    simp at ht




  --obtain ‚ü®D‚ü© := ht
    sorry
