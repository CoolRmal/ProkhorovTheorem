--import Mathlib
import Mathlib.MeasureTheory.Measure.LevyProkhorovMetric
--import Mathlib.Topology.MetricSpace.Embedding
--import Mathlib.Topology.MetricSpace.HilbertCube


set_option diagnostics true

set_option autoImplicit false

open TopologicalSpace MeasureTheory.ProbabilityMeasure Module--Analysis

variable {G : Type*} [PseudoMetricSpace G] [CompactSpace G] [SeparableSpace G]
  [MeasurableSpace G] [OpensMeasurableSpace G]

namespace MeasureTheory
noncomputable section
instance psm : PseudoMetricSpace (LevyProkhorov <| ProbabilityMeasure G) :=
  levyProkhorovDist_pseudoMetricSpace_probabilityMeasure


instance levyProkhorovCompact : CompactSpace (LevyProkhorov (ProbabilityMeasure G)) := by
  have hSeparability : SeparableSpace G := by infer_instance
  --let C := Dual G
  -- instance : NormedSpace ‚Ñù C(G, ‚Ñù) :=
  --   have E : CompleteSpace C(X, ‚Ñù) ‚àß NormedSpace ‚Ñù C(X, ‚Ñù) :=
  --   have hbanach : BanachSpace (ProbabilityMeasure X) := by
  sorry


--open scoped Interval MeasureTheory

open Topology Metric Filter Set ENNReal NNReal MeasureTheory.ProbabilityMeasure TopologicalSpace

def IsTightMeasureSet (S : Set (Measure G)) : Prop :=
  Tendsto (‚®Ü Œº ‚àà S, Œº) (cocompact G).smallSets (ùìù 0)

variable (S : Set <| Measure G)
--Useful version
lemma IsTightMeasureSet_iff_exists_isCompact_measure_compl_le :
    IsTightMeasureSet S ‚Üî ‚àÄ Œµ, 0 < Œµ ‚Üí ‚àÉ K : Set G, IsCompact K ‚àß ‚àÄ Œº ‚àà S, Œº (K·∂ú) ‚â§ Œµ := by sorry

def TightProb (S : Set (ProbabilityMeasure G)) : Prop :=
  ‚àÄ Œµ : ‚Ñù‚â•0‚àû, 0 < Œµ ‚Üí ‚àÉ K : Set G, IsCompact K ‚àß ‚àÄ Œº ‚àà S, Œº K·∂ú ‚â§ Œµ

lemma Tightprob_iff_Tight {S : Set (ProbabilityMeasure G)} :
  TightProb S ‚Üî IsTightMeasureSet {((Œº : ProbabilityMeasure G) : Measure G) | Œº ‚àà S} := by
  sorry
namespace MeasureTheory

open scoped Topology ENNReal NNReal BoundedContinuousFunction

variable {E : Type*} (Œº : Measure ‚Ñï := Measure.sum (fun i => (2‚Åª¬π  : NNReal)^i ‚Ä¢ Measure.dirac i))
  {X : Type*} [MetricSpace X] [SeparableSpace X]




--def Y' : Set (‚Ñï ‚Üí ‚Ñù) := {f | ‚àÄ n, f n ‚àà Icc (0 : ‚Ñù) 1}
def Y : Set ‚Ü•(Lp ‚Ñù 1 Œº) :=  (fun x => ‚áëx)‚Åª¬π' {f | ‚àÄ n, f n ‚àà Icc (0 : ‚Ñù) 1} --Y'

lemma Compacty : CompactSpace Y := sorry


theorem homeo_to_compact_space {X : Type*} [MetricSpace X] [SeparableSpace X] :
    ‚àÉ (T : X ‚Üí Y), IsEmbedding T := by--Maybe build T explicitly first?
    -- obtain ‚ü®D, fD‚ü© := TopologicalSpace.exists_countable_dense X
      sorry


lemma Tight_closure_if_tight (S : Set (ProbabilityMeasure G)):
  IsTightMeasureSet {((Œº : ProbabilityMeasure G) : Measure G) | Œº ‚àà S} ‚Üí
  TightProb (closure S) := by
  intro ht
  simp [TightProb]; intro Œµ hŒµ
  rw [‚Üê Tightprob_iff_Tight, TightProb] at ht
  specialize ht Œµ hŒµ
  obtain ‚ü®K,hc, htight‚ü© := ht; use K
  constructor
  ¬∑ simpa
  intro Œº hŒº


lemma Compact_if_tight {S : Set (ProbabilityMeasure G)}
(ht : IsTightMeasureSet {((Œº : ProbabilityMeasure G) : Measure G) | Œº ‚àà S}) :
  IsCompact (closure S) := by
  by_cases hempty : IsEmpty (closure S)
  ¬∑ simp_all only [isEmpty_coe_sort, isClosed_empty, IsClosed.closure_eq,
    finite_empty, Finite.isCompact]
  rw [not_isEmpty_iff] at hempty
  --rw [‚ÜêTightprob_iff_Tight, TightProb] at ht
  rw [@IsTightMeasureSet_iff_exists_isCompact_measure_compl_le] at ht
  --simp [IsCompact]
  obtain ‚ü®Œº , hŒº‚ü© := hempty
  --choose! Œµ using ht
  have tightness (Œµ : ENNReal) (hŒµ : Œµ > 0):
    ‚àÉ (K : Set G), IsCompact K ‚àß Œº K ‚â• 1 - Œµ := by
    specialize ht Œµ hŒµ
    simp at ht




  --obtain ‚ü®D‚ü© := ht
    sorry
