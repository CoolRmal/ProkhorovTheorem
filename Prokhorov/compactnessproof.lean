--import Mathlib
import Mathlib.MeasureTheory.Measure.LevyProkhorovMetric
--import Mathlib.Topology.MetricSpace.Embedding
--import Mathlib.Topology.MetricSpace.HilbertCube
import Prokhorov.Mathlib.Topology.Algebra.InfiniteSum.Basic

set_option autoImplicit false

open TopologicalSpace MeasureTheory.ProbabilityMeasure Module--Analysis

namespace ENNReal

@[simp] lemma nsmul_eq_mul (n : ‚Ñï) (x : ‚Ñù‚â•0‚àû) : n ‚Ä¢ x = n * x := by cases x <;> simp

end ENNReal

variable {G : Type*} [PseudoMetricSpace G] [CompactSpace G] [SeparableSpace G]
  [MeasurableSpace G] [OpensMeasurableSpace G] --[T2Space G]
  --Iterestingly I need the T2 assumption on G to show the closure is also tight

namespace MeasureTheory
noncomputable section
instance psm : PseudoMetricSpace (LevyProkhorov <| ProbabilityMeasure G) :=
  levyProkhorovDist_pseudoMetricSpace_probabilityMeasure


instance levyProkhorovCompact : CompactSpace (LevyProkhorov (ProbabilityMeasure G)) := by
  have hSeparability : SeparableSpace G := by infer_instance
  --let C : G ‚Üí ‚Ñù := Dual G
  -- instance : NormedSpace ‚Ñù C(G, ‚Ñù) :=
  sorry


--open scoped Interval MeasureTheory

open Topology Metric Filter Set ENNReal NNReal MeasureTheory.ProbabilityMeasure TopologicalSpace

def IsTightMeasureSet (S : Set (Measure G)) : Prop :=
  Tendsto (‚®Ü Œº ‚àà S, Œº) (cocompact G).smallSets (ùìù 0)

variable (S : Set <| ProbabilityMeasure G)
--Useful version
lemma IsTightMeasureSet_iff_exists_isCompact_measure_compl_le :
    IsTightMeasureSet {((Œº : ProbabilityMeasure G) : Measure G) | Œº ‚àà S} ‚Üî
    ‚àÄ (Œµ : ENNReal), 0 < Œµ ‚Üí ‚àÉ K : Set G, IsCompact K ‚àß ‚àÄ Œº ‚àà S, Œº (K·∂ú) ‚â§ Œµ := by sorry


def TightProb (S : Set (ProbabilityMeasure G)) : Prop :=
  ‚àÄ Œµ : ‚Ñù‚â•0‚àû, 0 < Œµ ‚Üí ‚àÉ K : Set G, IsCompact K ‚àß ‚àÄ Œº ‚àà S, Œº K·∂ú ‚â§ Œµ

lemma Tightprob_iff_Tight {S : Set (ProbabilityMeasure G)} :
  TightProb S ‚Üî IsTightMeasureSet {((Œº : ProbabilityMeasure G) : Measure G) | Œº ‚àà S} := by
  sorry

open Bornology
open scoped Topology ENNReal NNReal BoundedContinuousFunction

variable {E : Type*}
  {X : Type*} [MetricSpace X] [SeparableSpace X] [Nonempty X]
def Œº : Measure ‚Ñï := Measure.sum (fun i => (2‚Åª¬π  : NNReal)^i ‚Ä¢ Measure.dirac i)

@[simp]
lemma iUnion_pure : (‚®Ü i, pure i: Filter ‚Ñï) = ‚ä§ := by
  ext i; constructor
  ¬∑ intro hi;
    simp_all only [mem_iSup, mem_pure, mem_top]
    ext x
    simp_all only [mem_univ]
  ¬∑ intro hi; simp_all only [mem_top, univ_mem]

@[simp] lemma ae_Œº : ae Œº = ‚ä§ := by
  simp [ae_eq_top]
  intro a
  simp[Œº]

def equiv (s : Set (‚Ñï ‚Üí ‚Ñù)) (hs : ‚àÉ t : Set ‚Ñù, IsBounded t ‚àß s ‚äÜ Set.univ.pi fun ‚Ñï ‚Ü¶ t) :
    s ‚âÉ ((‚áë) ‚Åª¬π' s : Set (Lp ‚Ñù 1 Œº)) where
  toFun f := by
    refine ‚ü®MemLp.toLp f ?_, ?_‚ü©
    ¬∑ simp [MemLp]
      constructor
      ¬∑ measurability
      simp [eLpNorm, eLpNorm'];
      obtain ‚ü®bigset, bd, bigsetbound‚ü© := hs
      rw [lintegral_countable']
      have (a) : ‚Äñ(f : ‚Ñï ‚Üí ‚Ñù) a‚Äñ‚Çë < ‚ä§ := by
        simp
      rw [@isBounded_iff_forall_norm_le] at bd
      obtain ‚ü®C, hC‚ü© := bd
      have sdo : (‚àÄ a, ‚Äñ(f : ‚Ñï ‚Üí ‚Ñù) a‚Äñ‚Çë ‚â§ (C.toNNReal)) := by
        intro a
        specialize hC ((f : ‚Ñï ‚Üí ‚Ñù) a)
        have bob : (f : ‚Ñï ‚Üí ‚Ñù) a ‚àà bigset := by aesop
        specialize hC bob
        rw [Real.norm_eq_abs] at hC
        rw [@enorm_le_coe]
        exact NNReal.le_toNNReal_of_coe_le hC
      have mulrw : ‚àë' (a : ‚Ñï), ‚Äñ(f : ‚Ñï ‚Üí ‚Ñù) a‚Äñ‚Çë * Œº {a} ‚â§ ‚àë' (a : ‚Ñï), C.toNNReal * Œº {a} := by
        gcongr with a
        exact sdo a
      apply mulrw.trans_lt
      rw [ENNReal.tsum_mul_left]
      refine mul_lt_top (by simp) ?_
      simp [Œº, indicator, ENNReal.smul_def]
      simp_rw [ENNReal.inv_pow, tsum_geometric, one_sub_inv_two, inv_inv, ofNat_lt_top]
    ¬∑ simp
      convert f.2
      simpa using MemLp.coeFn_toLp (Œº := Œº) _
  invFun f := ‚ü®f, f.2‚ü©
  left_inv f := by ext : 1; simpa using MemLp.coeFn_toLp (Œº := Œº) _
  right_inv f := by simp

def Y : Set (Lp ‚Ñù 1 Œº) :=  (fun x => ‚áëx)‚Åª¬π' {f | ‚àÄ n, f n ‚àà Icc (0 : ‚Ñù) 1}

lemma Compacty : CompactSpace Y := by
  sorry -- refine compactSpace_iff_isBounded_univ.mpr ?_ ?_

variable (a := Classical.choose (exists_dense_seq X))

-- def T (x : X) : Y := equiv {
--     val n := min 1 (dist x <| Classical.choose (exists_dense_seq X) n)
--     property := sorry
--   }

theorem homeo_to_compact_space {X : Type*} [MetricSpace X] [SeparableSpace X] :
    ‚àÉ (T : X ‚Üí Y), IsEmbedding T := by--Maybe build T explicitly first?
    -- obtain ‚ü®D, fD‚ü© := TopologicalSpace.exists_countable_dense X
      sorry

omit [PseudoMetricSpace G] [CompactSpace G] [SeparableSpace G] [OpensMeasurableSpace G] in
lemma ENNreal_ProbMeasure_toMeasure (Œº : ProbabilityMeasure G) (A : Set G) :
    Œº.toMeasure A = ((Œº A) : ENNReal) := by
    exact Eq.symm (ennreal_coeFn_eq_coeFn_toMeasure Œº A)

variable [MeasurableSpace X] [MeasurableSpace Y] (Œº : ProbabilityMeasure G) (ŒΩ : ProbabilityMeasure Y)
  (Œ® : G ‚Üí Y) (hŒ® : AEMeasurable Œ® Œº)

/-Needs sorting once format of Y is sorted-/
lemma conc_mass : ‚àÉ (C : Set Y), ŒΩ(C) = 1 := by sorry


-- lemma define_Œºn (Œºn : ‚Ñï ‚Üí ProbabilityMeasure G) (hŒºn : ‚àÄ n, Œºn n ‚àà S)(T : X ‚Üí Y) (ht : IsEmbedding T) : ‚àÉ (ŒΩn : ‚Ñï ‚Üí ProbabilityMeasure Y),
--       ‚àÄ n, ŒΩn n = (Œºn n).map hŒ® := by sorry

-- lemma concentrated_mass (Œºn : ‚Ñï ‚Üí ProbabilityMeasure G) (hŒºn : ‚àÄ n, Œºn n ‚àà S) (T : X ‚Üí Y) (ht : IsEmbedding T): ‚àÉ (C : Y), ŒΩ(C) = 1 := by sorry



variable [T2Space G]
/-One direction is trivial-/
lemma Tight_closure_iff_tight (S : Set (ProbabilityMeasure G)):
  IsTightMeasureSet {((Œº : ProbabilityMeasure G) : Measure G) | Œº ‚àà S} ‚Üî
  TightProb (closure S) := by
  constructor; swap
  ¬∑ simp [TightProb]; intro hŒµ; rw [IsTightMeasureSet_iff_exists_isCompact_measure_compl_le]
    intro Œµ Œµpos; specialize hŒµ Œµ Œµpos; obtain ‚ü®K,hkCompact,hbound‚ü© := hŒµ
    use K; constructor
    ¬∑ exact hkCompact
    intro Œº hŒº; specialize hbound Œº <| subset_closure hŒº
    rw [‚ÜêENNreal_ProbMeasure_toMeasure]
    exact hbound
  intro ht
  simp [TightProb]; intro Œµ hŒµ
  rw [‚Üê Tightprob_iff_Tight, TightProb] at ht
  specialize ht Œµ hŒµ
  obtain ‚ü®K,hc, htight‚ü© := ht; use K
  constructor
  ¬∑ simpa
  intro Œº hŒº
  obtain ‚ü®convseq, hconv_mem, hconv‚ü© := mem_closure_iff_seq_limit.mp hŒº
  have tightnesscalc := calc
    (Œº.toMeasure K·∂ú)
    _ ‚â§ (liminf (fun k => (convseq k (K·∂ú))) atTop) := by
      rw [ENNreal_ProbMeasure_toMeasure]; norm_cast
      have hopen : IsOpen K·∂ú := by
        simp
        -- Note - I needed to add a Hausdorff assumption for this line
        -- (Maybe there is a way to avoid it)
        -- I only need to prove K is closed to apply the portmanteau theorem
        apply hc.isClosed
      have := ProbabilityMeasure.le_liminf_measure_open_of_tendsto hconv hopen
      simp_rw [‚ÜêProbabilityMeasure.ennreal_coeFn_eq_coeFn_toMeasure] at this
      rw [‚ÜêofNNReal_liminf] at this;
      exact ENNReal.coe_le_coe.mp this
      use 1; simp; intro a x hb
      specialize hb x (by rfl)
      apply hb.trans; simp
    _ ‚â§ Œµ := by
      rw [ofNNReal_liminf]; apply Filter.liminf_le_of_le
      ¬∑ use 0; simp
      simp only [eventually_atTop, ge_iff_le, forall_exists_index]
      intro b c h
      apply le_trans (h c le_rfl) <| htight (convseq c) <| hconv_mem c
      use 1; simp; intro a x hb
      specialize hb x (by rfl)
      apply hb.trans; simp
  exact tightnesscalc

lemma Compact_if_tight {S : Set (ProbabilityMeasure G)}
(ht : IsTightMeasureSet {((Œº : ProbabilityMeasure G) : Measure G) | Œº ‚àà S}) :
  IsCompact (closure S) := by
  by_cases hempty : IsEmpty (closure S)
  ¬∑ simp_all only [isEmpty_coe_sort, isClosed_empty, IsClosed.closure_eq,
    finite_empty, Finite.isCompact]
  rw [not_isEmpty_iff] at hempty
  rw [Tight_closure_iff_tight, TightProb] at ht
  obtain ‚ü®Œº , hŒº‚ü© := hempty
  have tightness (Œµ : ENNReal) (hŒµ : Œµ > 0):
    ‚àÉ (K : Set G), IsCompact K ‚àß Œº K·∂ú ‚â§ Œµ := by
    specialize ht Œµ hŒµ
    simp at ht
    obtain ‚ü®K,l,r‚ü© := ht
    specialize r Œº hŒº
    use K
    constructor
    all_goals simpa

  sorry

end
end MeasureTheory

