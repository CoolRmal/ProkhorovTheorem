import Mathlib.Probability.IdentDistrib
import Mathlib.MeasureTheory.Integral.IntervalIntegral -- Assuming relevant modules are available
import Mathlib.MeasureTheory.Measure.LevyProkhorovMetric
import Mathlib.MeasureTheory.Measure.ProbabilityMeasure
import Mathlib.Topology.Defs.Basic
import Mathlib.Topology.MetricSpace.Defs
--set_option maxHeartbeats 400000
--set_option diagnostics true

open Topology Metric Filter Set ENNReal NNReal ProbabilityMeasure TopologicalSpace

namespace MeasureTheory

open scoped Topology ENNReal NNReal BoundedContinuousFunction

-- This has been proved by Ya√´l and will be in Mathlib soon. PR: #22659
lemma ofNNReal_liminf {Œπ : Type*} {l : Filter Œ±} {f : Œ± ‚Üí ‚Ñù‚â•0} (hf : l.IsCoboundedUnder (¬∑ ‚â• ¬∑) f) :
    liminf f l = liminf (fun i ‚Ü¶ (f i : ‚Ñù‚â•0‚àû)) l := by
  sorry

-- This too in #22877
variable {Œ© : Type*} [MeasurableSpace Œ©] in
protected lemma ProbabilityMeasure.tendsto_measure_iUnion_accumulate {Œπ : Type*} [Preorder Œπ]
    [IsCountablyGenerated (atTop : Filter Œπ)] {Œº : ProbabilityMeasure Œ©} {f : Œπ ‚Üí Set Œ©} :
    Tendsto (fun i ‚Ü¶ Œº (Accumulate f i)) atTop (ùìù (Œº (‚ãÉ i, f i))) := by
  simpa [‚Üê ennreal_coeFn_eq_coeFn_toMeasure, ENNReal.tendsto_coe]
    using tendsto_measure_iUnion_accumulate (Œº := Œº.toMeasure)
variable {Œ© : Type*} [MeasurableSpace Œ©] [PseudoMetricSpace Œ©] -- consider changing this to EMetric later
[OpensMeasurableSpace Œ©] [SeparableSpace Œ©] --[‚àÄ i, Œº i : Measure Œ©] {P : MeasurableSpace Œ©}
variable {Œº : ‚Ñï ‚Üí Set Œ© ‚Üí ‚Ñù}




noncomputable section

--def compactsetofmeasures := {X : Set (ProbabilityMeasure Œ©) // IsCompact X}

variable (S : Set (ProbabilityMeasure Œ©)) --(S : Set (ProbabilityMeasure Œ©)) --

abbrev P := LevyProkhorov.equiv (ProbabilityMeasure Œ©)

--abbrev T := P‚Åª¬π' S

theorem prob_tendsto_measure_iUnion_accumulate {Œ± Œπ : Type*}
    [Preorder Œπ] [IsCountablyGenerated (atTop : Filter Œπ)]
    {_ : MeasurableSpace Œ±} {Œº : Measure Œ±} {f : Œπ ‚Üí Set Œ±} :
    Tendsto (fun i ‚Ü¶ Œº (Accumulate f i)) atTop (ùìù (Œº (‚ãÉ i, f i))) := by
  refine .of_neBot_imp fun h ‚Ü¶ ?_
  have := (atTop_neBot_iff.1 h).2
  rw [measure_iUnion_eq_iSup_accumulate]
  exact tendsto_atTop_iSup fun i j hij ‚Ü¶ by gcongr

lemma claim5point2 (U : ‚Ñï ‚Üí Set Œ©) (O : ‚àÄ i, IsOpen (U i)) --(T : Set (LevyProkhorov (ProbabilityMeasure Œ©)))
    (hcomp: IsCompact (closure S)) (Œµ : ‚Ñù‚â•0) (heps : Œµ > 0) (hepsb : Œµ ‚â§ 1) (Cov : ‚ãÉ i, U i = univ):
    ‚àÉ (k : ‚Ñï), ‚àÄ Œº ‚àà S, Œº (‚ãÉ (i ‚â§ k), U i) > 1 - Œµ := by
  by_contra! nh
  choose Œº hŒº hŒºŒµ using nh
  --exact hcomp.mem_of_is_closed (IsClosed.closure hcomp.is_closed)
  obtain ‚ü®Œºnew, hŒºtwo, sub, tub, bub‚ü© := hcomp.isSeqCompact (fun n =>  subset_closure <| hŒº n)
  have thing n := calc
    (Œºnew (‚ãÉ (i ‚â§ n), U i))
    _ ‚â§ liminf (fun k => (Œº (sub k) (‚ãÉ (i ‚â§ n), U i))) atTop := by
      have hopen : IsOpen (‚ãÉ i, ‚ãÉ (_ : i ‚â§ n), U i) := by
        exact isOpen_biUnion fun i a => O i
      --This is the key lemma
      have := ProbabilityMeasure.le_liminf_measure_open_of_tendsto bub hopen
      simp only [Function.comp_apply] at this
      simp only [‚Üê ProbabilityMeasure.ennreal_coeFn_eq_coeFn_toMeasure] at this
      rw [‚ÜêofNNReal_liminf] at this
      norm_cast at this
      ¬∑ use 1
        simp
        intro a t h
        have tranineq : ‚àÄ (b : ‚Ñï), t ‚â§ b ‚Üí (Œº (sub b)) (‚ãÉ i, ‚ãÉ (_ : i ‚â§ n), U i) ‚â§ 1 := by
          intro b hb
          exact ProbabilityMeasure.apply_le_one (Œº (sub b)) (‚ãÉ i, ‚ãÉ (_ : i ‚â§ n), U i)
        have step : ‚àÄ (b : ‚Ñï), t ‚â§ b ‚Üí a ‚â§ 1 := by
          exact fun b a_1 =>
            Preorder.le_trans a ((Œº (sub b)) (‚ãÉ i, ‚ãÉ (_ : i ‚â§ n), U i)) 1 (h b a_1) (tranineq b a_1)
        refine step ?_ ?_
        use t + 1
        norm_num
      ¬∑ exact Œ©
    _ ‚â§ liminf (fun k => (Œº (sub k) (‚ãÉ (i ‚â§ sub k), U i))) atTop := by
      apply Filter.liminf_le_liminf
      ¬∑ simp
        use n + 1
        intro b hypo
        refine (Œº (sub b)).apply_mono <| Set.biUnion_mono (fun i (hi : i ‚â§ n) ‚Ü¶ hi.trans ?_) fun _ _ ‚Ü¶ le_rfl
        apply le_trans _ (le_trans hypo _)
        norm_num
        exact StrictMono.le_apply tub
      ¬∑ simp [autoParam]
        use 0
        simp
      ¬∑ simp [autoParam]
        use 1
        simp
        intro a d hyp
        specialize hyp d (by simp)
        apply hyp.trans
        simp_all only [ProbabilityMeasure.apply_le_one]
      -- rw [Tendsto.liminf_eq]--, Tendsto.liminf_eq]
    _ ‚â§ 1 - Œµ := by
      push_cast
      apply Filter.liminf_le_of_le
      ¬∑ use 0
        simp
      ¬∑ simp only [eventually_atTop, ge_iff_le, forall_exists_index]
        intros b c h
        refine le_trans (h c le_rfl) (hŒºŒµ _)
  have cdiction : Tendsto (fun n => Œºnew (‚ãÉ i ‚â§ n, U i)) atTop (ùìù 1) := by
    have re : Tendsto (fun n => Œºnew (‚ãÉ i, ‚ãÉ (_ : i ‚â§ n), U i)) atTop (ùìù (Œºnew (‚ãÉ i, U i))) := by
      -- congr
      simp_rw [‚ÜêSet.accumulate_def]
      exact ProbabilityMeasure.tendsto_measure_iUnion_accumulate
    rw [Cov] at re
    simp at re
    exact re


  have oop : ‚àÄ·∂† n in atTop, Œºnew (‚ãÉ i, ‚ãÉ (_ : i ‚â§ n), U i) ‚â• 1 - Œµ / 2 := by
    --rw [tendsto_atTop_nhds] at cdiction
    apply eventually_ge_of_tendsto_gt (v := 1)
    norm_num
    positivity
    sorry
    --exact cdiction

  suffices ‚àÄ·∂† n : ‚Ñï in atTop, False by exact this.exists.choose_spec
  filter_upwards [oop] with n hn
  have whatever := hn.trans (thing n)
  --simp at this
  --linarith at whatever
  --refine sub_le_sub_left at whatever
  -- have con : Œµ / 2 ‚â•  Œµ := by
  --   refine (le_div_iff‚ÇÄ' ?hr).mpr ?_
  --   norm_num
  --   apply le_mul_of_one_le_left
  --   apply sub_le_sub_left at whatever
  linarith at whatever
  rw [sub_le_sub_iff_left] at whatever
  norm_num at whatever
  rw [le_sub_self_iff] at whatever

  apply Eventually.of_forall at thing --(f:= atTop)

  contradiction

  rw [Tendsto.lim_eq] at cdiction

  sorry





-- lemma fivepoint3 {MeasurableSpace X} (MetricSpace X)  (h : IsCompact X) : (inferInstance : TopologicalSpace (LevyProkhorov (ProbabilityMeasure X))) := by
--   sorry


-- Definition taken from R√©my's PR number #21955
def IsTightFamily (S : Set (Measure Œ©)) : Prop :=
  ‚àÄ Œµ, 0 < Œµ ‚Üí ‚àÉ (K_Œµ : Set Œ©), ‚àÄ Œº ‚àà S, Œº K_Œµ·∂ú < Œµ ‚àß IsCompact K_Œµ


def IsRelativelyCompact (S : Set (Measure Œ©)) [PseudoMetricSpace (Measure Œ©)] : Prop :=
  IsCompact (closure S)

theorem Prokhorov (G : Set (Measure Œ©)) [PseudoMetricSpace (Measure Œ©)]:
   (IsTightFamily G) ‚Üî (IsRelativelyCompact G) := by
   sorry

end section
-- Change Omega to X






      -- Stuff from trying to prove union of i < n tends to union of i
      -- apply Filter.Tendsto.comp ?_ ?_
      -- exact Filter.sInf fun a => S Œºnew
      -- rw [Cov]
      -- simp only [ProbabilityMeasure.coeFn_univ]


      -- rw [Filter.tendsto_atTop']
      -- rw [Cov]
      -- simp only [ProbabilityMeasure.coeFn_univ]
      -- intro s hs


      --rw [Tendsto]

      -- refine map_le_iff_le_comap.mpr ?one
      -- rw [Cov]
      -- simp only [ProbabilityMeasure.coeFn_univ]

      -- have hm : Monotone (fun n => ‚ãÉ i ‚â§ n, U i) := by
      --   intro a b h
      --   refine le_iff_subset.mpr ?_
      --   sorry

      --norm_push
      -- refine tendsto_measure_iUnion_atTop ?_


      --intro blob a
      --rw [tendsto_map'_iff]
